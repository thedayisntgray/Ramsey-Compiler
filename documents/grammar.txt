<program> -> <toplvlstmts>
<toplvlstmts> -> <toplvlstmt>
	| <toplvlstmt> endline <toplvlstmts>

<toplvlstmt> -> <stmts>
	| fun <ident> (<opt_params>) as <type> <optional_stmts> toss <expr> endfun 
	| <ident> < - <expr>
	| <type> <ident> < - <expr>
	| take <ident> 
	| give <ident>
	| array [<literal>] as <type>
	| array [<ident>] as <type>

<stmts> -> <stmt>
	| <stmt> endline <stmts>
<stmt> -> if (<boolexp>) <optional_stmts> endif
	| if (<boolexp>) <optional_stmts> else <optional_stmts> endif
	| if (<boolexp>) <optional_stmts> elf (<boolexp>) <optional_stmts> endif 
	| if (<boolexp>) <optional_stmts> elf (<boolexp>) <optional_stmts> else <optional_stmts> endif
	| while (<boolexp>) <optional_stmts> endwhile

<optional_stmts> -> e 
	| <stmts>

<opt_params> -> <params>
	| e

<params> -> <param> , <params> 
	| <param>
	
<param> -> <type> <ident>


<expr> -> <expr> <op> <expr>
	| <expr> <op> <expr>
	| <ident> <op> <ident>
	| <ident> <op> <expr>
	| <ident>
	| <literal> <op> <ident>
	| <literal> <op> <literal>
	| (<expr>)
	| <ident> <op> <literal>

<boolexp> -> <boolexp> AND <boolexp>
	| <boolexp> OR <boolexp>
	| NOT <boolexp>
	| (<boolexp>)
	| <ident> <boolop> <boolexp>
	| <ident> <boolop> <ident>
	| <literal> <boolop> <ident>
	| <ident> <boolop> <literal>
	| <literal> <boolop> <literal>

<type> -> bool
	| in

<op> ->   +
	| -
	| *
	| /
	| %

<boolop> -> <
	| <=
	| =
	| >
	| >=
	| !=

<ident> -> from regex
	| <ident>
<literal> -> from regex
