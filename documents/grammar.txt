<program> -> <toplvlstmts>
<toplvlstmts> -> <toplvlstmt> "\n" <toplvlstmtsA>

<toplvlstmtsA> -> <toplvlstmts>
	| e

<toplvlstmt> -> <stmts>
	| fun <ident> (<opt_params>) as <type> "\n" <fun_stmts> "\n" toss <expr> "\n" endfun 

<stmts> -> <stmt>
	| <stmt> "\n" <stmts>

<stmt> -> if (<boolexp>) "\n" <optional_stmts> "\n" <stmtA>
	| while (<boolexp>) "\n" <optional_stmts> "\n" endwhile
	| <ident> < - <expr>
	| <type> <ident>
	| <type> <ident> <- <expr>
	| <expr>

<stmtA> -> endif
	|	else "\n" <optional_stmts> "\n" endif
	|	<elves> <stmtB>

<stmtB> -> endif
	| else "\n" <optional_stmts> "\n" endif


<elves> -> elf (<boolexp>) "\n" <optional_stmts> "\n" <elvesA>

<elvesA> -> <elves>
	| e

<optional_stmts> -> e 
	| <stmts>

<fun_stmts> -> e 
	| <stmts>
	| toss <expr>

<opt_params> -> <params>
	| e

<params> -> <param> <paramsA>

<paramsA> -> , <params>
	| e
	
<param> -> <type> <ident>

<expr> -> <expr> <op> <expr>
	| <expr> <op> <ident>
	| <ident>
	| <literal>
	| (<expr>)
	| chop (<expr>)

<boolexp> -> <boolexpA>
	| NOT <boolexp>
	| (<boolexp>)
	| <ident> <boolop> <boolexp>
	| <ident> <boolop> <expr>
	| <ident> <boolop> <ident>
	| <ident> <boolop> <literal>
	| <literal> <boolop> <ident>
	| <literal> <boolop> <literal>

<boolexpA> -> OR <boolexp>
	| AND <boolexp>

<type> -> bool
	| in
	| small
	| big

<op> ->   +
	| -
	| *
	| /
	| %

<boolop> -> <
	| <=
	| =
	| >
	| >=
	| !=

<ident> -> from regex
	
<literal> -> from regex
