<program> -> <toplvlstmts>
<toplvlstmts> -> <toplvlstmt> "\n" <toplvlstmtsA>

<toplvlstmtsA> -> <toplvlstmts>
	| e

<toplvlstmt> -> <stmts>
	| fun <ident> (<opt_params>) as <type> "\n" <fun_stmts> "\n" toss <expr> "\n" endfun 

<stmts> -> <stmt> "\n" <stmtX>


<stmtX> -> <stmts>
	| e

<stmt> -> if (<boolexp>) "\n" <optional_stmts> "\n" <stmtA>
	| while (<boolexp>) "\n" <optional_stmts> "\n" endwhile
	| <ident> <identTail>
	| <type> <ident> <stmtC>
	| <expr>

<stmtA> -> endif
	|	else "\n" <optional_stmts> "\n" endif
	|	<elves> <stmtB> 

<stmtB> -> endif
	| else "\n" <optional_stmts> "\n" endif
	
<stmtC> -> <- <expr>
	| e
	
<identTail> -> <- <expr>
	| <exprTail>

<elves> -> elf (<boolexp>) "\n" <optional_stmts> "\n" <elvesA>

<elvesA> -> <elves>
	| e

<optional_stmts> -> e 
	| <stmts>

<fun_stmts> -> e 
	| <stmts>
	| toss <expr>

<opt_params> -> <params>
	| e

<params> -> <param> <paramsA>

<paramsA> -> , <params>
	| e
	
<param> -> <type> <ident>

-------------------------------------
// New stuff
<expr> -> <ident> <exprTailB>
        | <numLit> <exprTailA>
        | <boolLit> <boolexpTail>
        | ( <parenexpr>
        | (<expr>)
        | chop (<chopTail>) <exprTailA>

<chopTail> -> <numLit> <numExprTailW/Op>
        | <ident> <numExprTailW/Op>
        
<exprTailA> -> <boolop> <boolNumExprTail>
        | <op> <numExpr>
        | e
        
<exprTailB> -> <boolexpTail>
        | <boolop> <boolNumExprTail>
        | <op> <numExpr>
        
<boolexp> -> <boolLit> <boolexpTail>
        | NOT <boolexp>
        | <ident> <identFollow>
        | (<boolexp>) <boolexpTail>
        | <numLit> <evalToBoolFollow>
        
<identFollow> -> <boolexpTail>
        | <evalToBoolFollow>
        
<evalToBoolFollow> -> <boolop> <boolNumExprTail>
        | <numExprTailW/Op> <boolop> <boolNumExprTail>
        
<numExpr> -> <numLit> <numExprTailW/Op>
        | <ident> <numExprTailW/Op>
        | chop (<chopTail>) <numExprTailW/Op>
        | (<numExpr>) <numExprTail w/op>

<boolexpTail> -> And <boolexp>
        | OR <boolexp>
        | e

<boolNumExprTail> -> <numExpr> <boolexpTail>

<numExprTail w/op> -> <op> <numExpr>
        | e

<parenExpr> -> <ident> <exprTailBParen>
        | <numLit> <exprTailAParen>
        | ( <parenExpr> <parenExpr>
        | chop (<chopTail>) <exprTailAParen>
        | <boolLit> <boolexpTailParen>
        | )

<exprTailBParen> -> <boolexpTail> ) <boolexpTail> 
        | <boolop> <boolNumExprTail> ) <boolexpTail>
        | <op> <numExpr> ) <exprTailA> 

<exprTailAParen> -> <boolop> <boolNumExprTail> ) <boolexpTail>
        | <op> <numExpr> ) <ExprTailA>

<boolexpTailParen> -> AND <boolexp> ) <boolexpTail>
        | OR <boolexp> ) <boolexpTail>
        | ) <boolexpTail>
----------------------------------------------------

<type> -> bool
	| in
	| small
	| big

<op> ->   +
	| -
	| *
	| /
	| %

<boolop> -> <
	| <=
	| =
	| >
	| >=
	| !=

<ident> -> from regex
	
<literal> -> from regex
//Add ++ to literals in lexer
